/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puzzlegame;

import java.awt.event.KeyEvent;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JButton;
public class Puzzle extends javax.swing.JFrame {
    int emptyTile = 0;
    int movesCount = 0;
    String s = new String();
    ImageIcon[] imgSet ={
                            new ImageIcon(getClass().getResource("/puzzlegame/piecenull.png")),
                            new ImageIcon(getClass().getResource("/puzzlegame/piece1.png")),
                            new ImageIcon(getClass().getResource("/puzzlegame/piece2.png")),
                            new ImageIcon(getClass().getResource("/puzzlegame/piece3.png")),
                            new ImageIcon(getClass().getResource("/puzzlegame/piece4.png")),
                            new ImageIcon(getClass().getResource("/puzzlegame/piece5.png")),
                            new ImageIcon(getClass().getResource("/puzzlegame/piece6.png")),
                            new ImageIcon(getClass().getResource("/puzzlegame/piece7.png")),
                            new ImageIcon(getClass().getResource("/puzzlegame/piece8.png")),
                            new ImageIcon(getClass().getResource("/puzzlegame/piece9.png"))                          
                        };
    private int[] currentImgMapping = {0,1,2,3,4,5,6,7,8,9};
    
    
    //make imaGE:::::Image img = ImageIO.read(getClass().getResource("resources/water.bmp"));
    
    /**
     * Creates new form Puzzle
     */
    public Puzzle() {
        initComponents();
        gameStartState();
        tile0.setIcon(imgSet[currentImgMapping[0]]);
        tile1.setIcon(imgSet[currentImgMapping[1]]);
        tile2.setIcon(imgSet[currentImgMapping[2]]);
        tile3.setIcon(imgSet[currentImgMapping[3]]);
        tile4.setIcon(imgSet[currentImgMapping[4]]);
        tile5.setIcon(imgSet[currentImgMapping[5]]);
        tile6.setIcon(imgSet[currentImgMapping[6]]);
        tile7.setIcon(imgSet[currentImgMapping[7]]);
        tile8.setIcon(imgSet[currentImgMapping[8]]);
        tile9.setIcon(imgSet[currentImgMapping[9]]);
        s = ""+movesCount;
        moves.setText(s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tile1 = new javax.swing.JButton();
        tile2 = new javax.swing.JButton();
        tile3 = new javax.swing.JButton();
        tile4 = new javax.swing.JButton();
        tile5 = new javax.swing.JButton();
        tile6 = new javax.swing.JButton();
        tile7 = new javax.swing.JButton();
        tile8 = new javax.swing.JButton();
        tile9 = new javax.swing.JButton();
        tile0 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        moves = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                input(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                input(evt);
            }
        });

        tile1.setIconTextGap(0);
        tile1.setPreferredSize(new java.awt.Dimension(100, 100));
        tile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile1ActionPerformed(evt);
            }
        });

        tile2.setPreferredSize(new java.awt.Dimension(100, 100));
        tile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile2ActionPerformed(evt);
            }
        });

        tile3.setPreferredSize(new java.awt.Dimension(100, 100));
        tile3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile3ActionPerformed(evt);
            }
        });

        tile4.setPreferredSize(new java.awt.Dimension(100, 100));
        tile4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile4ActionPerformed(evt);
            }
        });

        tile5.setPreferredSize(new java.awt.Dimension(100, 100));
        tile5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile5ActionPerformed(evt);
            }
        });

        tile6.setPreferredSize(new java.awt.Dimension(100, 100));
        tile6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile6ActionPerformed(evt);
            }
        });

        tile7.setPreferredSize(new java.awt.Dimension(100, 100));
        tile7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile7ActionPerformed(evt);
            }
        });

        tile8.setPreferredSize(new java.awt.Dimension(100, 100));
        tile8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile8ActionPerformed(evt);
            }
        });

        tile9.setPreferredSize(new java.awt.Dimension(100, 100));
        tile9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile9ActionPerformed(evt);
            }
        });

        tile0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puzzlegame/piecenull.png"))); // NOI18N
        tile0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile0ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Moves:");

        moves.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tile7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(tile8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tile4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(tile5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tile6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tile9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(tile2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tile0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tile3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(moves, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tile0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(moves, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tile4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tile7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tile4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile4ActionPerformed
        // TODO add your handling code here:
        if(emptyTile == 1){
            switchTile(tile4, tile1, currentImgMapping[4], currentImgMapping[1]);
            switchMapIndex(4, 1);
        }else if(emptyTile == 5){
            switchTile(tile4, tile5, currentImgMapping[4], currentImgMapping[5]);
            switchMapIndex(4, 5);
        }else if(emptyTile == 7){
            switchTile(tile4, tile7, currentImgMapping[4], currentImgMapping[7]);
            switchMapIndex(4, 7);
        }
    }//GEN-LAST:event_tile4ActionPerformed

    private void tile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile1ActionPerformed
        // TODO add your handling code here:
        if(emptyTile == 0){
            switchTile(tile1, tile0, currentImgMapping[1], currentImgMapping[0]);
            switchMapIndex(1, 0);
        }else if(emptyTile == 4){
            switchTile(tile1, tile4, currentImgMapping[1], currentImgMapping[4]);
            switchMapIndex(1, 4);
        }else if(emptyTile == 2){
            switchTile(tile1, tile2, currentImgMapping[1], currentImgMapping[2]);
            switchMapIndex(1, 2);
        }
    }//GEN-LAST:event_tile1ActionPerformed

    private void tile3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile3ActionPerformed
        // TODO add your handling code here:
        if(emptyTile == 2){
            switchTile(tile3, tile2, currentImgMapping[3], currentImgMapping[2]);
            switchMapIndex(3, 2);
        }else if(emptyTile == 6){
            switchTile(tile3, tile6, currentImgMapping[3], currentImgMapping[6]);
            switchMapIndex(3, 6);
        }
    }//GEN-LAST:event_tile3ActionPerformed

    private void tile5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile5ActionPerformed
        // TODO add your handling code here:
        if(emptyTile == 2){
            switchTile(tile5, tile2, currentImgMapping[5], currentImgMapping[2]);
            switchMapIndex(5, 2);
        }else if(emptyTile == 4){
            switchTile(tile5, tile4, currentImgMapping[5], currentImgMapping[4]);
            switchMapIndex(5, 4);
        }else if(emptyTile == 6){
            switchTile(tile5, tile6, currentImgMapping[5], currentImgMapping[6]);
            switchMapIndex(5, 6);
        }else if(emptyTile == 8){
            switchTile(tile5, tile8, currentImgMapping[5], currentImgMapping[8]);
            switchMapIndex(5, 8);
        }
    }//GEN-LAST:event_tile5ActionPerformed

    private void tile8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile8ActionPerformed
        // TODO add your handling code here:
        if(emptyTile == 5){
            switchTile(tile8, tile5, currentImgMapping[8], currentImgMapping[5]);
            switchMapIndex(8, 5);
        }else if(emptyTile == 7){
            switchTile(tile8, tile7, currentImgMapping[8], currentImgMapping[7]);
            switchMapIndex(8, 7);
        }else if(emptyTile == 9){
            switchTile(tile8, tile9, currentImgMapping[8], currentImgMapping[9]);
            switchMapIndex(8, 9);
        }
    }//GEN-LAST:event_tile8ActionPerformed

    private void tile9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile9ActionPerformed
        // TODO add your handling code here:
        if(emptyTile == 6){
            switchTile(tile9, tile6, currentImgMapping[9], currentImgMapping[6]);
            switchMapIndex(9, 6);
        }else if(emptyTile == 8){
            switchTile(tile9, tile8, currentImgMapping[9], currentImgMapping[8]);
            switchMapIndex(9, 8);
        }
        
    }//GEN-LAST:event_tile9ActionPerformed

    private void tile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile2ActionPerformed
        // TODO add your handling code here:
        if(emptyTile == 1){
            switchTile(tile2, tile1, currentImgMapping[2], currentImgMapping[1]);
            switchMapIndex(2,1);
        }else if(emptyTile == 5){
            switchTile(tile2, tile5, currentImgMapping[2], currentImgMapping[5]);
            switchMapIndex(2, 5);
        }else if(emptyTile == 3){
            switchTile(tile2, tile3, currentImgMapping[2], currentImgMapping[3]);
            switchMapIndex(2, 3);
        }
    }//GEN-LAST:event_tile2ActionPerformed

    private void tile0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile0ActionPerformed
        // TODO add your handling code here:
        if(emptyTile == 1){
            switchTile(tile0, tile1, currentImgMapping[0], currentImgMapping[1]);
            switchMapIndex(0, 1);
            for(int i=0;i<10;i++){
                if(currentImgMapping[i]!=i){
                    break;
                }if(i==9){
                    System.out.println("Winner");
                }
            }
        }
    }//GEN-LAST:event_tile0ActionPerformed

    private void tile7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile7ActionPerformed
        // TODO add your handling code here:
        if(emptyTile == 4){
            switchTile(tile7, tile4, currentImgMapping[7], currentImgMapping[4]);
            switchMapIndex(7, 4);
        }else if(emptyTile == 8){
            switchTile(tile7, tile8, currentImgMapping[7], currentImgMapping[8]);
            switchMapIndex(7, 8);
        }
    }//GEN-LAST:event_tile7ActionPerformed

    private void tile6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile6ActionPerformed
        // TODO add your handling code here:
        if(emptyTile == 3){
            switchTile(tile6, tile3, currentImgMapping[6], currentImgMapping[3]);
            switchMapIndex(6, 3);
        }else if(emptyTile == 5){
            switchTile(tile6, tile5, currentImgMapping[6], currentImgMapping[5]);
            switchMapIndex(6, 5);
        }else if(emptyTile == 9){
            switchTile(tile6, tile9, currentImgMapping[6], currentImgMapping[9]);
            switchMapIndex(6, 9);
        }
    }//GEN-LAST:event_tile6ActionPerformed

    private void input(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input
        // TODO add your handling code here:
        System.out.println("insie teh");
        if(evt.getKeyCode() == KeyEvent.VK_LEFT){
            switch(emptyTile){
                case 1:
                    switchTile(tile2, tile1, currentImgMapping[2], currentImgMapping[1]);
                    switchMapIndex(2, 1);
                    break;
                case 2:
                    switchTile(tile3, tile2, currentImgMapping[3], currentImgMapping[2]);
                    switchMapIndex(3, 2);
                    break;
                case 4:
                    switchTile(tile5, tile4, currentImgMapping[5], currentImgMapping[4]);
                    switchMapIndex(5, 4);
                    break;
                case 5:
                    switchTile(tile6, tile5, currentImgMapping[6], currentImgMapping[5]);
                    switchMapIndex(6, 5);
                    break;
                case 7:
                    switchTile(tile8, tile7, currentImgMapping[8], currentImgMapping[7]);
                    switchMapIndex(8, 7);
                    break;
                case 8:
                    switchTile(tile9, tile8, currentImgMapping[9], currentImgMapping[8]);
                    switchMapIndex(9, 8);
                    break;
            }
        }
    }//GEN-LAST:event_input

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Puzzle().setVisible(true);
                
            }
        });
    }
    private void switchTile(JButton clicked,JButton shift,int cimg,int simg){
        clicked.setIcon(imgSet[simg]);
        shift.setIcon(imgSet[cimg]);
        movesCount++;
        s = ""+movesCount;
        moves.setText(s);
    }
    private void switchMapIndex(int shifted, int emptied){
        currentImgMapping[shifted] += currentImgMapping[emptied];
        currentImgMapping[emptied] = currentImgMapping[shifted] - currentImgMapping[emptied];
        currentImgMapping[shifted] = currentImgMapping[shifted] - currentImgMapping[emptied];
        emptyTile = shifted;
    }
    private void gameStartState(){
        Random r = new Random();
        for(int i = 2;i<=9;i++){
            currentImgMapping[i] = r.nextInt(10);
            //System.out.print("gen "+ currentImgMapping[i]+ "  ");
            for(int j = 0;j<i;j++){
            //    System.out.print("chk "+j +"  ");
                while(currentImgMapping[i] == currentImgMapping[j]){
                    currentImgMapping[i] = r.nextInt(10); 
            //        System.out.print("gen "+ currentImgMapping[i]+ "  ");
                    if(currentImgMapping[i] != currentImgMapping[j]){
                        j=-1;
                        break;
                    }
                }
                
            }
            //System.out.println("took "+currentImgMapping[i]+"  ");
        }
        for(int m:currentImgMapping){
            System.out.print(m + "  ");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel moves;
    private javax.swing.JButton tile0;
    private javax.swing.JButton tile1;
    private javax.swing.JButton tile2;
    private javax.swing.JButton tile3;
    private javax.swing.JButton tile4;
    private javax.swing.JButton tile5;
    private javax.swing.JButton tile6;
    private javax.swing.JButton tile7;
    private javax.swing.JButton tile8;
    private javax.swing.JButton tile9;
    // End of variables declaration//GEN-END:variables
}
